
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BIT_AND BIT_OR BOOL BOOL COLON COMMA DEF DIVIDE EMP_LIST EMP_SET EMP_TUPLE EQEQ EQUAL FLOAT FLOWERCLOSE FLOWEROPEN FOR GREATER GREATEREQ HASH ID IF IN INT LESSER LESSEREQ LEVEL1 LEVEL2 LEVEL3 MINUS MOD MULTIPLY NAME NEWLINE NOTEQ OR PARANCLOSE PARANOPEN PLUS PRINT RANGE STR_CONST WHILEexpression : ID EQUAL expression\n                    | ID EQUAL STR_CONST\n                    expression : expression PLUS termexpression : PRINT expression\n                    | PRINT PARANOPEN ID PARANCLOSEexpression : expression MINUS term\n                    | MINUS termexpression : termterm : term MULTIPLY factorterm : term DIVIDE factorterm : factorfactor : INT\n            | FLOATfactor : PARANOPEN expression PARANCLOSEexpression : WHILE PARANOPEN ID EQUAL factor PARANCLOSE COLON \n                    | WHILE PARANOPEN ID EQUAL STR_CONST PARANCLOSE COLON\n                    | WHILE PARANOPEN ID EQUAL ID PARANCLOSE COLON\n                    | WHILE PARANOPEN ID GREATER factor PARANCLOSE COLON\n                    | WHILE PARANOPEN ID GREATER STR_CONST PARANCLOSE COLON\n                    | WHILE PARANOPEN ID GREATER ID PARANCLOSE COLON\n                    | WHILE PARANOPEN ID GREATEREQ factor PARANCLOSE COLON\n                    | WHILE PARANOPEN ID GREATEREQ STR_CONST PARANCLOSE COLON\n                    | WHILE PARANOPEN ID GREATEREQ ID PARANCLOSE COLON\n                    | WHILE PARANOPEN ID LESSER factor PARANCLOSE COLON\n                    | WHILE PARANOPEN ID LESSER STR_CONST PARANCLOSE COLON\n                    | WHILE PARANOPEN ID LESSER ID PARANCLOSE COLON\n                    | WHILE PARANOPEN ID LESSEREQ factor PARANCLOSE COLON\n                    | WHILE PARANOPEN ID LESSEREQ STR_CONST PARANCLOSE COLON\n                    | WHILE PARANOPEN ID LESSEREQ ID PARANCLOSE COLON\n                    | WHILE BOOL COLON\n                    | WHILE STR_CONST COLON\n                    | WHILE factor COLON\n                    | WHILE ID COLONexpression : FOR ID IN RANGE PARANOPEN expression PARANCLOSE COLON \n                    | FOR ID IN STR_CONST COLON\n                    | FOR ID IN ID COLON\n                    | FOR ID IN PARANOPEN STR_CONST PARANCLOSE COLONexpression : LEVEL1 ID EQUAL INTexpression : expression : HASH expression\n                    | HASH ID\n                    | HASH STR_CONST'
    
_lr_action_items = {'ID':([0,4,5,7,9,10,12,16,20,23,46,49,50,51,52,53,75,],[2,2,2,24,28,29,31,2,39,41,54,59,62,65,68,71,2,]),'PRINT':([0,4,5,12,16,20,23,49,75,],[4,4,4,4,4,4,4,4,4,]),'MINUS':([0,1,3,4,5,8,11,12,13,16,19,20,21,22,23,30,31,32,33,34,35,36,37,38,40,42,43,44,45,48,49,58,60,61,74,75,77,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,],[6,15,-8,6,6,-11,-12,6,-13,6,15,6,15,-7,6,15,-41,-42,-3,-6,15,-2,-9,-10,-14,-33,-32,-31,-30,-5,6,-38,-11,-2,-36,6,-35,15,-17,-15,-16,-20,-18,-19,-23,-21,-22,-26,-24,-25,-29,-27,-28,-37,-34,]),'WHILE':([0,4,5,12,16,20,23,49,75,],[7,7,7,7,7,7,7,7,7,]),'FOR':([0,4,5,12,16,20,23,49,75,],[9,9,9,9,9,9,9,9,9,]),'LEVEL1':([0,4,5,12,16,20,23,49,75,],[10,10,10,10,10,10,10,10,10,]),'PLUS':([0,1,3,4,5,8,11,12,13,16,19,20,21,22,23,30,31,32,33,34,35,36,37,38,40,42,43,44,45,48,49,58,60,61,74,75,77,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,],[-39,14,-8,-39,-39,-11,-12,-39,-13,-39,14,-39,14,-7,-39,14,-41,-42,-3,-6,14,-2,-9,-10,-14,-33,-32,-31,-30,-5,-39,-38,-11,-2,-36,-39,-35,14,-17,-15,-16,-20,-18,-19,-23,-21,-22,-26,-24,-25,-29,-27,-28,-37,-34,]),'$end':([0,1,3,4,8,11,12,13,16,19,22,30,31,32,33,34,35,36,37,38,40,42,43,44,45,48,58,74,77,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,],[-39,0,-8,-39,-11,-12,-39,-13,-39,-4,-7,-40,-41,-42,-3,-6,-1,-2,-9,-10,-14,-33,-32,-31,-30,-5,-38,-36,-35,-17,-15,-16,-20,-18,-19,-23,-21,-22,-26,-24,-25,-29,-27,-28,-37,-34,]),'HASH':([0,4,5,12,16,20,23,49,75,],[12,12,12,12,12,12,12,12,12,]),'INT':([0,4,5,6,7,12,14,15,16,17,18,20,23,47,49,50,51,52,53,75,],[11,11,11,11,11,11,11,11,11,11,11,11,11,58,11,11,11,11,11,11,]),'FLOAT':([0,4,5,6,7,12,14,15,16,17,18,20,23,49,50,51,52,53,75,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'PARANOPEN':([0,4,5,6,7,12,14,15,16,17,18,20,23,46,49,50,51,52,53,55,75,],[5,20,5,5,23,5,5,5,5,5,5,5,5,56,5,5,5,5,5,75,5,]),'EQUAL':([2,29,31,39,41,59,],[16,47,16,16,49,16,]),'PARANCLOSE':([3,4,5,8,11,12,13,16,19,20,21,22,23,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,48,49,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,],[-8,-39,-39,-11,-12,-39,-13,-39,-4,-39,40,-7,-39,-40,-41,-42,-3,-6,-1,-2,-9,-10,48,-14,-33,-32,-31,-30,-5,-39,-38,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,-36,-39,94,-35,110,-17,-15,-16,-20,-18,-19,-23,-21,-22,-26,-24,-25,-29,-27,-28,-37,-34,]),'MULTIPLY':([3,8,11,13,22,33,34,37,38,40,60,],[17,-11,-12,-13,17,17,17,-9,-10,-14,-11,]),'DIVIDE':([3,8,11,13,22,33,34,37,38,40,60,],[18,-11,-12,-13,18,18,18,-9,-10,-14,-11,]),'BOOL':([7,],[27,]),'STR_CONST':([7,12,16,46,49,50,51,52,53,56,],[26,32,36,57,61,64,67,70,73,76,]),'COLON':([11,13,24,25,26,27,40,54,57,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,110,],[-12,-13,42,43,44,45,-14,74,77,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,]),'IN':([28,],[46,]),'GREATER':([41,],[50,]),'GREATEREQ':([41,],[51,]),'LESSER':([41,],[52,]),'LESSEREQ':([41,],[53,]),'RANGE':([46,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,4,5,12,16,20,23,49,75,],[1,19,21,30,35,21,21,35,93,]),'term':([0,4,5,6,12,14,15,16,20,23,49,75,],[3,3,3,22,3,33,34,3,3,3,3,3,]),'factor':([0,4,5,6,7,12,14,15,16,17,18,20,23,49,50,51,52,53,75,],[8,8,8,8,25,8,8,8,8,37,38,8,8,60,63,66,69,72,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> ID EQUAL expression','expression',3,'p_assign','yacc.py',10),
  ('expression -> ID EQUAL STR_CONST','expression',3,'p_assign','yacc.py',11),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yacc.py',18),
  ('expression -> PRINT expression','expression',2,'p_print_statement','yacc.py',22),
  ('expression -> PRINT PARANOPEN ID PARANCLOSE','expression',4,'p_print_statement','yacc.py',23),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yacc.py',26),
  ('expression -> MINUS term','expression',2,'p_expression_minus','yacc.py',27),
  ('expression -> term','expression',1,'p_expression_term','yacc.py',34),
  ('term -> term MULTIPLY factor','term',3,'p_term_times','yacc.py',38),
  ('term -> term DIVIDE factor','term',3,'p_term_div','yacc.py',42),
  ('term -> factor','term',1,'p_term_factor','yacc.py',46),
  ('factor -> INT','factor',1,'p_factor_num','yacc.py',50),
  ('factor -> FLOAT','factor',1,'p_factor_num','yacc.py',51),
  ('factor -> PARANOPEN expression PARANCLOSE','factor',3,'p_factor_expr','yacc.py',55),
  ('expression -> WHILE PARANOPEN ID EQUAL factor PARANCLOSE COLON','expression',7,'p_while','yacc.py',59),
  ('expression -> WHILE PARANOPEN ID EQUAL STR_CONST PARANCLOSE COLON','expression',7,'p_while','yacc.py',60),
  ('expression -> WHILE PARANOPEN ID EQUAL ID PARANCLOSE COLON','expression',7,'p_while','yacc.py',61),
  ('expression -> WHILE PARANOPEN ID GREATER factor PARANCLOSE COLON','expression',7,'p_while','yacc.py',62),
  ('expression -> WHILE PARANOPEN ID GREATER STR_CONST PARANCLOSE COLON','expression',7,'p_while','yacc.py',63),
  ('expression -> WHILE PARANOPEN ID GREATER ID PARANCLOSE COLON','expression',7,'p_while','yacc.py',64),
  ('expression -> WHILE PARANOPEN ID GREATEREQ factor PARANCLOSE COLON','expression',7,'p_while','yacc.py',65),
  ('expression -> WHILE PARANOPEN ID GREATEREQ STR_CONST PARANCLOSE COLON','expression',7,'p_while','yacc.py',66),
  ('expression -> WHILE PARANOPEN ID GREATEREQ ID PARANCLOSE COLON','expression',7,'p_while','yacc.py',67),
  ('expression -> WHILE PARANOPEN ID LESSER factor PARANCLOSE COLON','expression',7,'p_while','yacc.py',68),
  ('expression -> WHILE PARANOPEN ID LESSER STR_CONST PARANCLOSE COLON','expression',7,'p_while','yacc.py',69),
  ('expression -> WHILE PARANOPEN ID LESSER ID PARANCLOSE COLON','expression',7,'p_while','yacc.py',70),
  ('expression -> WHILE PARANOPEN ID LESSEREQ factor PARANCLOSE COLON','expression',7,'p_while','yacc.py',71),
  ('expression -> WHILE PARANOPEN ID LESSEREQ STR_CONST PARANCLOSE COLON','expression',7,'p_while','yacc.py',72),
  ('expression -> WHILE PARANOPEN ID LESSEREQ ID PARANCLOSE COLON','expression',7,'p_while','yacc.py',73),
  ('expression -> WHILE BOOL COLON','expression',3,'p_while','yacc.py',74),
  ('expression -> WHILE STR_CONST COLON','expression',3,'p_while','yacc.py',75),
  ('expression -> WHILE factor COLON','expression',3,'p_while','yacc.py',76),
  ('expression -> WHILE ID COLON','expression',3,'p_while','yacc.py',77),
  ('expression -> FOR ID IN RANGE PARANOPEN expression PARANCLOSE COLON','expression',8,'p_for','yacc.py',83),
  ('expression -> FOR ID IN STR_CONST COLON','expression',5,'p_for','yacc.py',84),
  ('expression -> FOR ID IN ID COLON','expression',5,'p_for','yacc.py',85),
  ('expression -> FOR ID IN PARANOPEN STR_CONST PARANCLOSE COLON','expression',7,'p_for','yacc.py',86),
  ('expression -> LEVEL1 ID EQUAL INT','expression',4,'p_indent_assign','yacc.py',92),
  ('expression -> <empty>','expression',0,'p_blank','yacc.py',99),
  ('expression -> HASH expression','expression',2,'p_comment','yacc.py',102),
  ('expression -> HASH ID','expression',2,'p_comment','yacc.py',103),
  ('expression -> HASH STR_CONST','expression',2,'p_comment','yacc.py',104),
]
